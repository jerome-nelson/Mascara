//Mascara by Jerome
// http://www.jerome-nelson.co.uk
// This file will override certain settings for default Foundation
// Licensed under 

//Imports
@import "compass/css3";


//List of Contents
//
// a. Bools
// b. Colour Scheme
// c. Fonts
// d. Mixins
// e. Compass Globals

//a. Bools - used for now 
// TODO: Once finished building, remove dependencies by removing all CSS default classes.
$one: true;
$zero: false;

//b. Colour Scheme (used to create layout colours) - Overriden in future files
//Colour List (used on colour dependencies - will be removed once all colours have been mapped to sass functions).
$green: #158560;
$grey-dark: #404040;
$black: #000;
$white: #fff;
// $grey: #656868;
//$yellow: #fddb1d;

// $brown: #6c604e; 
$darkaqua: #22566e; 
$orange: #bb892c;



$primary-colour: $grey-dark !default;
$primary-lighter: lighten($primary-colour, 25);
$primary-darker: darken($primary-colour, 15);
$primary-complement: lighten(saturate(adjust_hue($primary-colour, 30), 15), 10%);
$secondary-colour: $green !default;
$secondary-lighter: lighten($secondary-colour, 25);
$secondary-darker: darken($secondary-colour, 15);
$secondary-complement: lighten(adjust_hue(saturate($secondary-colour, 25), 255), 25%); //Currently comes out with yellow. Thanks to SASS-Color-Picker

$colour-list: primary-colour, primary-lighter, primary-darker, primary-complement, secondary-colour, secondary-lighter, secondary-darker, secondary-complement;
$colour-scheme: $primary-colour, $primary-lighter, $primary-darker, $primary-complement, $secondary-colour, $secondary-lighter, $secondary-darker, $secondary-complement;

//c. Fonts
//Font Library
$straight: Calibri, Arial, sans serif;
$title: 'Microsoft New Tai Lue', serif;
$font-family-sans-serif: $straight;
$bet365: "HelveticaNeue-CondensedBold","Helvetica Neue",Helvetica,"Segoe UI",Roboto,"Droid Sans",Arial,sans-serif;


//d. Mixins
@mixin embevel_color($color,$position,$li_mode: false,$custom-ratio-pos: 15,$custom-ratio-neg: -15, $custom-element-ratio: 10,$custom-gradient: false) {
	@if $li_mode {
		
		$oppositedir: nth((top,left,right,bottom),index((bottom,right,left,top),$position));
		
		& + li {
			border-#{$oppositedir}:  solid 1px scale-lightness($color, $custom-ratio-pos); 
		}
		* > &:first-child {
			border-left-color: transparent;
		}
		* > &:last-child {
			border-right: none;
		}
		& {
			border-#{$position}: solid 1px adjust-lightness($color, $custom-ratio-neg);		
			border-#{$oppositedir}:  solid 1px scale-lightness($color, $custom-ratio-pos); 	
		}
		&:hover {
			@include embevel_element(scale-lightness($color, $custom-element-ratio), $position, no,$gradient: $custom-gradient);
		}
	}
	@elseif $position == 'top' or $position == 'bottom' or $position == 'left' or $position == 'right' and type-of($color) == 'color' {
		&:before {
			border-#{$position}: solid 1px scale-lightness($color, $custom-ratio-pos);
		}
		border-#{$position}: solid 1px adjust-lightness($color, $custom-ratio-neg);
	}
	@elseif $position == 'all' {
		border: solid 1px adjust-lightness($color, $custom-ratio-neg);
		outline: solid 1px adjust-lightness($color, $custom-ratio-pos);	
	}
	@elseif type-of($color) != 'color' {
		@error "#{$color} is not a valid colour.";
	}
	@else {	
		@error "#{$position} is not a valid value";
	}
}

@mixin embevel_element($color, $position: top,$text-shadow: yup,$custom-ratio-pos: 15,$custom-ratio-neg: -15, $custom-element-ratio: 10, $gradient: false,$fontcolor: scale-lightness($color,75)){

	@if type-of($color) != 'color' {
		@error "#{$color} is not a valid colour.";
	}
	@else {
		
		//Set default text-shadow color
		$default-text-shadow-color: rgba(shade($color,75%),.75);

		@include embevel_color($color,$position,false,$custom-ratio-pos,$custom-ratio-neg, $custom-element-ratio);
		
		@if $gradient {
			@include background-image(linear-gradient($color,adjust-lightness($color,5)));
		}
		@else {
			background: $color;
		}
		color: $fontcolor !important;
		@if $text-shadow == yup {
			@include single-text-shadow;
		}
		@else if type-of($text-shadow) == 'color' {
			@include text-shadow($text-shadow, $default-text-shadow-h-offset, $default-text-shadow-v-offset, $default-text-shadow-blur, $default-text-shadow-spread);
		}
		@else {
		}
	}
}

@mixin hover-color($color) {
	@if $color != '' and type-of($color) == 'color' {
		& {
			@include background(adjust-lightness($color,5));
		}
	}
	@else {
		@error "The color value #{$color} entered is not valid";
	}
}

@mixin dead-button($color) {
		background-image: transparent !important;
		background: adjust-lightness($color, -5) !important;
		&, & > * {				
			color: adjust-lightness($color, -1) !important;
			@include text-shadow(0 0 0 transparent !important);
		}
		border-color: adjust-lightness($color, -5) !important;
		@include box-shadow(0 0 0 transparent !important);
		@include text-shadow(0 0 0 transparent);
}

// Creates a looped set of rules based off array lists 
@mixin value-list($classname-prepend,$class,$listnames, $listvalues) {
	/* #{$class} CSS */
	@each $value in $listvalues {	
		.#{$classname-prepend}-#{nth($listnames, index($listvalues, $value))} {
				
			/*	@if type-of($value) == number {
					#{$class}: rem-calc($value) !important; 
				} */
					#{$class}: $value !important;
		}
	}
}



//e. Compass Globals//Compass Config
//Text-Shadow Defaults
$default-text-shadow-color: rgba(darken($primary-lighter,50%),0.7);

//These defaults make the arguments optional for this mixin If you like, set different defaults in your project
$default-text-shadow-h-offset: -1px;
$default-text-shadow-v-offset: 0px;
$default-text-shadow-blur: 0px;
$default-text-shadow-spread: 0px;